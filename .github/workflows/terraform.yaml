name: VprofileApp-IAC
on:
  push:
    branches:
      - main
    paths:
      - terraform/**
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/**'

env: 
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  EKS_CLUSTER: eks-cluster

jobs:
  terraform:
    name: "Apply terraform changes"
    runs-on: ubuntu-latest
    defaults:   
      run: 
        shell: bash
        working-directory: ./terraform

    steps:
      - name: Checkout source code
        uses: actions/checkout@v5.0.0

      - name: HashiCorp - Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.3


      - name: Terraform Init
        id: init
        run: terraform init -backend-config="bucket=$BUCKET_TF_STATE"
          
      - name: Terraform Fmt
        id: fmt
        run: terraform fmt -check

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false -out planefile
        continue-on-error: true   

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'   #outcome is a variable that will actually has the failure or success
        run: exit 1

      - name: terraform Apply
        id: apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false -parellelism=1 planefile
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Get Kube config file
        id: getconfig
        if: steps.apply.outcome == 'success'
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_DEFAULT_REGION }} --name ${{ env.EKS_CLUSTER }}

      - name: Install Ingress Controller
        if: steps.apply.outcome == 'success' && steps.getconfig.outcome == 'success'
        run: |
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/aws/deploy.yaml
          kubectl rollout status deployment ingress-nginx-controller -n ingress-nginx
